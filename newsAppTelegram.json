{
  "name": "Daily AI News Digest - Fixed Ollama Workflow",
  "nodes": [
    {
      "parameters": {
        "cronExpression": "0 6 * * *",
        "timeZone": "UTC"
      },
      "id": "1",
      "name": "Schedule Trigger (daily @ 06:00 UTC)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [200, 200]
    },
    {
      "parameters": {
        "operation": "getAll",
        "url": "https://your-news-source-feed-or-api"
      },
      "id": "2",
      "name": "Fetch AI News Articles",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [400, 200]
    },
    {
      "parameters": {
        "functionCode": "return items.filter(item => (item.json.content_text || '').split(' ').length > 50);"
      },
      "id": "3",
      "name": "Filter Short Articles (â‰¥50 words)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [600, 200]
    },
    {
      "parameters": {
        "url": "http://192.168.30.250:11434/api/generate",
        "options": {},
        "responseFormat": "string",
        "jsonParameters": true,
        "sendHeaders": true,
        "headerParametersJson": "{\n  \"Content-Type\": \"application/json\",\n  \"Accept\": \"application/json\"\n}",
        "bodyParametersJson": "={\n  \"model\": \"llama3.1:8b\",\n  \"prompt\": \"You are an AI news assistant. Given the article below, return ONLY a valid JSON object with these keys:\\nenglish_summary (3-4 sentences in English),\\narabic_summary (3-4 sentences in Modern Standard Arabic),\\nrelevance_score_arabic_ai (integer 1-10),\\nkeywords (array up to 6),\\ncategory (one of ['LLM Development','AI Application','AI Research','Market News','Arabic AI Breakthrough']).\\n\\nArticle link: {{$json.link}}\\nArticle text: {{$json.content_text}}\\n\\nReturn JSON only.\",\n  \"max_tokens\": 800,\n  \"temperature\": 0.0,\n  \"stream\": false\n}"
      },
      "id": "4",
      "name": "Ollama - Summarize & Classify",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [800, 200]
    },
    {
      "parameters": {
        "functionCode": "// Parse Ollama raw response robustly\nconst respNode = $node[\"Ollama - Summarize & Classify\"];\nif (!respNode) throw new Error(\"Ollama node not found\");\n\nconst nodeJson = respNode.json || {};\nlet raw = '';\nif (nodeJson.body) raw = nodeJson.body.toString();\nelse if (nodeJson.data) raw = nodeJson.data.toString();\nelse if (nodeJson.response) raw = nodeJson.response.toString();\nelse raw = (typeof nodeJson === 'string') ? nodeJson : JSON.stringify(nodeJson);\n\nraw = raw.replace(/```json\\s*/g, '').replace(/```/g, '').trim();\n\nlet parsed;\ntry {\n  parsed = JSON.parse(raw);\n} catch (e) {\n  const m = raw.match(/\\{[\\s\\S]*\\}/);\n  if (m) {\n    try { parsed = JSON.parse(m[0]); }\n    catch (e2) { parsed = { parse_error: true, raw }; }\n  } else {\n    parsed = { parse_error: true, raw };\n  }\n}\n\nreturn [{\n  json: Object.assign({}, $json, {\n    ollama_raw: raw,\n    ollama_parsed: parsed\n  })\n}];"
      },
      "id": "5",
      "name": "Parse Ollama Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1000, 200]
    },
    {
      "parameters": {
        "functionCode": "const p = $json.ollama_parsed || {};\n\nreturn [{\n  json: Object.assign({}, $json, {\n    english_summary: p.english_summary || p.summary_en || p.english || '',\n    arabic_summary: p.arabic_summary || p.summary_ar || p.arabic || '',\n    relevance_score_arabic_ai: parseInt(p.relevance_score_arabic_ai || p.relevance || p.score || 1, 10) || 1,\n    keywords: Array.isArray(p.keywords) ? p.keywords : (p.keywords ? String(p.keywords).split(',').map(s=>s.trim()) : []),\n    category: p.category || 'Market News'\n  })\n}];"
      },
      "id": "6",
      "name": "Normalize Ollama Output",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1200, 200]
    },
    {
      "parameters": {
        "mode": "multiplex"
      },
      "id": "7",
      "name": "Aggregate Enriched Articles",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [1400, 200]
    },
    {
      "parameters": {
        "functionCode": "const itemsList = items.map(i => i.json);\nlet digest = 'ðŸ“° *Daily AI News Digest*\\n\\n';\n\nitemsList.forEach((it, idx) => {\n  digest += `*${idx+1}. ${it.category || ''}* (Score: ${it.relevance_score_arabic_ai || 0})\\n`;\n  digest += `EN: ${it.english_summary}\\n`; \n  digest += `AR: ${it.arabic_summary}\\n`;\n  digest += `Keywords: ${(it.keywords || []).join(', ')}\\n`;\n  if (it.link) digest += `Link: ${it.link}\\n`;\n  digest += `--------------------------\\n`;\n});\n\nreturn [{ json: { digest } }];"
      },
      "id": "8",
      "name": "Compile Digest",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1600, 200]
    },
    {
      "parameters": {
        "chatId": "YOUR_TELEGRAM_CHAT_ID",
        "text": "={{$json[\"digest\"]}}"
      },
      "id": "9",
      "name": "Telegram - Send Digest",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1800, 100],
      "credentials": {
        "telegramApi": "YOUR_TELEGRAM_BOT_CREDENTIAL"
      }
    },
    {
      "parameters": {
        "from": "YOUR_WHATSAPP_NUMBER",
        "to": "TARGET_WHATSAPP_NUMBER",
        "message": "={{$json[\"digest\"]}}"
      },
      "id": "10",
      "name": "WhatsApp - Send Digest",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [1800, 300],
      "credentials": {
        "twilioApi": "YOUR_TWILIO_CREDENTIAL"
      }
    }
  ],
  "connections": {
    "Schedule Trigger (daily @ 06:00 UTC)": {
      "main": [[{ "node": "Fetch AI News Articles", "type": "main", "index": 0 }]]
    },
    "Fetch AI News Articles": {
      "main": [[{ "node": "Filter Short Articles (â‰¥50 words)", "type": "main", "index": 0 }]]
    },
    "Filter Short Articles (â‰¥50 words)": {
      "main": [[{ "node": "Ollama - Summarize & Classify", "type": "main", "index": 0 }]]
    },
    "Ollama - Summarize & Classify": {
      "main": [[{ "node": "Parse Ollama Response", "type": "main", "index": 0 }]]
    },
    "Parse Ollama Response": {
      "main": [[{ "node": "Normalize Ollama Output", "type": "main", "index": 0 }]]
    },
    "Normalize Ollama Output": {
      "main": [[{ "node": "Aggregate Enriched Articles", "type": "main", "index": 0 }]]
    },
    "Aggregate Enriched Articles": {
      "main": [[{ "node": "Compile Digest", "type": "main", "index": 0 }]]
    },
    "Compile Digest": {
      "main": [
        { "node": "Telegram - Send Digest", "type": "main", "index": 0 },
        { "node": "WhatsApp - Send Digest", "type": "main", "index": 0 }
      ]
    }
  }
}
