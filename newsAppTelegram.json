{
  "name": "Daily AI News Digest - Arabic AI Priority (Ollama) - Production Template",
  "nodes": [
    {
      "parameters": {
        "cronExpression": "0 6 * * *",
        "timeZone": "UTC"
      },
      "name": "Schedule Trigger (daily @ 06:00 UTC)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        250,
        250
      ]
    },
    {
      "parameters": {
        "url": "https://techcrunch.com/tag/ai/feed/",
        "limit": 20
      },
      "name": "RSS - TechCrunch AI",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        600,
        60
      ]
    },
    {
      "parameters": {
        "url": "https://venturebeat.com/category/ai/feed/",
        "limit": 20
      },
      "name": "RSS - VentureBeat AI",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        600,
        140
      ]
    },
    {
      "parameters": {
        "url": "http://export.arxiv.org/rss/cs.AI",
        "limit": 20
      },
      "name": "RSS - arXiv cs.AI",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        600,
        220
      ]
    },
    {
      "parameters": {
        "url": "https://aitrends.com/feed/",
        "limit": 20
      },
      "name": "RSS - AI Trends",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        600,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://news.ycombinator.com/rss",
        "limit": 20
      },
      "name": "RSS - Hacker News (tech signals)",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        600,
        380
      ]
    },
    {
      "parameters": {
        "url": "https://news.google.com/rss/search?q=الذكاء+الاصطناعي&hl=ar&gl=AE&ceid=AE:ar",
        "limit": 30
      },
      "name": "Google News RSS (الذكاء الاصطناعي)",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        600,
        460
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "headerAuth": [
          {
            "name": "Authorization",
            "value": "Bearer [YOUR_TWITTER_BEARER_TOKEN]"
          }
        ],
        "url": "https://api.twitter.com/2/tweets/search/recent?query=الذكاء_الاصطناعي OR \"الذكاء الاصطناعي\" lang:ar -is:retweet",
        "options": {},
        "responseFormat": "json"
      },
      "name": "Twitter - Keyword Monitor (optional)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        600,
        540
      ]
    },
    {
      "parameters": {
        "functionCode": "// Merge items from RSS and other sources into normalized array\nconst output = [];\nfor (const it of items) {\n  const j = it.json;\n  // Handle Twitter API response structure which might be in 'data' key\n  if (it.meta && it.meta.node === 'Twitter - Keyword Monitor (optional)' && j.data) {\n      j.data.forEach(item => output.push(item));\n  } else if (Array.isArray(j)) {\n    j.forEach(x => output.push(x));\n  } else {\n    output.push(j);\n  }\n}\nreturn output.map(i => ({ json: i }));"
      },
      "name": "Merge RSS outputs",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1200,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Deduplicate by URL (link) and normalize keys\nconst seen = new Set();\nconst out = [];\nfor (const it of items) {\n  const j = it.json;\n  // Attempt to get a link, considering Twitter specific 'id' to form a URL\n  let url = (j.link || j.url || (j.id ? `https://twitter.com/i/status/${j.id}` : '') || '').toString();\n  \n  if (!url) continue;\n  const normalized = url.split('?')[0];\n  if (seen.has(normalized)) continue;\n  seen.add(normalized);\n  \n  out.push({ json: {\n    title: j.title || j.text || j.headline || j.name || 'No Title',\n    link: url,\n    pubDate: j.pubDate || j.published || j.created_at || null,\n    summary: j.contentSnippet || j.description || j.text || '',\n    source: j.source || j.feedTitle || (j.author_id ? 'Twitter' : 'Unknown')\n  }});\n}\nreturn out;"
      },
      "name": "Deduplicate (by URL) & Normalize",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1500,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{$json.link}}",
        "response": {
          "response": {
            "from": "body",
            "type": "string"
          }
        },
        "options": {
          "ignoreStatusCodes": true
        }
      },
      "name": "HTTP Request - Fetch Article HTML",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1800,
        300
      ]
    },
    {
      "parameters": {
        "source": "html",
        "html": "={{$node[\"HTTP Request - Fetch Article HTML\"].json.body}}",
        "extractionValues": {
          "values": [
            {
              "key": "mainContent",
              "cssSelector": "article, main, [role='main'], .article-body, .post-content, .entry-content",
              "returnValue": "html"
            },
            {
              "key": "ogImage",
              "cssSelector": "meta[property='og:image'], meta[name='og:image'], meta[name='twitter:image']",
              "returnValue": "attribute",
              "attribute": "content"
            },
            {
              "key": "titleFromMeta",
              "cssSelector": "meta[property='og:title'], meta[name='og:title'], meta[name='twitter:title'], title",
              "returnValue": "attribute",
              "attribute": "content"
            }
          ]
        }
      },
      "name": "HTML Extract - main content & og:image",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        2100,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Use the extracted content; fallback to snippet; compute word count and filter short articles\nconst extractedData = $node['HTML Extract - main content & og:image'].json;\nconst html = extractedData.mainContent || $json.summary || '';\nconst text = (html + '').replace(/<[^>]+>/g, ' ').replace(/\\s+/g,' ').trim();\nconst wordCount = text ? text.split(' ').length : 0;\n\nif (wordCount < 150) {\n  // drop short articles\n  return [];\n}\n\nreturn [{ json: {\n  ...$json,\n  title: extractedData.titleFromMeta || $json.title,\n  content_text: text,\n  ogImage: extractedData.ogImage\n} }];"
      },
      "name": "Filter Short Articles (>150 words)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2400,
        300
      ]
    },
    {
      "parameters": {
        "url": "http://192.168.30.250:11434/api/generate",
        "options": {
          "timeout": 120000
        },
        "bodyParametersJson": "{\n\t\"model\": \"llama2\",\n\t\"stream\": false,\n\t\"prompt\": \"Given the following article link and text content, analyze and return a structured JSON object. The article content is potentially truncated.\\n\\nLink: {{$json.link}}\\nArticle text:\\n{{$json.content_text}}\\n\\nProduce a clean JSON object exactly with these keys: english_summary, arabic_summary, relevance_score_arabic_ai, keywords, category.\\n- english_summary: professional 3-4 sentence summary in English.\\n- arabic_summary: professional 3-4 sentence summary in Arabic (Modern Standard Arabic).\\n- relevance_score_arabic_ai: integer 1-10 (10=direct Arabic AI breakthrough).\\n- keywords: array of up to 6 keywords in Arabic/English.\\n- category: one of ['LLM Development','AI Application','AI Research','Market News','Arabic AI Breakthrough'].\\nReturn only the JSON object (no explanation).\"\n}"
      },
      "name": "Ollama - Summarize & Classify",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2700,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Parse Ollama response and attach to item\nlet parsed = {};\nconst resp = $node['Ollama - Summarize & Classify'].json.response;\ntry {\n  if (typeof resp === 'string') {\n    // Clean the response from markdown code blocks if any\n    const cleanedResp = resp.replace(/```json\\n|```/g, '').trim();\n    parsed = JSON.parse(cleanedResp);\n  } else {\n    parsed = resp; // Assume it's already an object\n  }\n} catch (e) {\n  console.error('Error parsing Ollama response:', e, 'Raw response:', resp);\n  parsed = {\n    english_summary: 'Error processing summary.',\n    arabic_summary: 'حدث خطأ أثناء معالجة الملخص.',\n    relevance_score_arabic_ai: 1,\n    keywords: ['error'],\n    category: 'Market News'\n  };\n}\nreturn [{ json: Object.assign({}, $json, { ollama: parsed }) }];"
      },
      "name": "Parse Ollama Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3000,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Normalize Ollama Output\nconst o = $json;\nconst relRaw = (o.ollama && (o.ollama.relevance_score_arabic_ai || o.ollama.relevance_score)) || 1;\nconst rel = parseInt(relRaw, 10) || 1;\nreturn [{ json: Object.assign({}, o, {\n  relevance: rel,\n  keywords: (o.ollama && o.ollama.keywords) || [],\n  category: (o.ollama && o.ollama.category) || 'Market News',\n  english_summary: (o.ollama && o.ollama.english_summary) || '',\n  arabic_summary: (o.ollama && o.ollama.arabic_summary) || '',\n  image: o.ogImage || null\n}) }];"
      },
      "name": "Normalize Ollama Output",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3300,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Aggregate enriched articles into one array\nconst arr = items.map(i => i.json);\nreturn [{ json: { articles: arr } }];"
      },
      "name": "Aggregate Enriched Articles",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3600,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Sort by relevance descending and build master JSON + Markdown digest\nconst data = $json.articles || [];\ndata.sort((a, b) => (b.relevance || 0) - (a.relevance || 0));\nconst master = { generated_at: new Date().toISOString(), count: data.length, articles: data };\n\nlet md = `*Daily AI News Digest (Arabic AI Priority)*\\n`;\nmd += `Generated: ${new Date(master.generated_at).toUTCString()}\\n`;\nmd += `Total items: ${master.count}\\n\\n`;\n\nfor (const a of data) {\n  // Sanitize title for markdown, escaping special characters\n  const title = (a.title || 'No Title').replace(/([_*`\\[\\]()~>#+\\-=|{}.!])/g, '\\\\$1');\n\n  md += `--------------------\\n\\n`;\n  md += `*[${title}](${a.link})*\\n\\n`;\n  if (a.image) {\n    // Use a zero-width space for image previews in Telegram\n    md += `[ ](${a.image})\\n`; \n  }\n  md += `*Source:* ${a.source || 'N/A'}\\n`;\n  md += `*Published:* ${a.pubDate ? new Date(a.pubDate).toUTCString() : 'N/A'}\\n`;\n  md += `*Relevance (Arabic AI):* ${a.relevance} / 10\\n`;\n  md += `*Keywords:* ${(a.keywords || []).join(', ')}\\n\\n`;\n  md += `*ملخص:*\\n`;\n  md += `${a.arabic_summary || ''}\\n\\n`;\n}\n\nreturn [{ json: { master, markdown: md } }];"
      },
      "name": "Compile Digest (sort & format)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3900,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://api.telegram.org/bot8368548013:AAGeBXsTAiUCKv1zw8TDENqqLUIX58pLGHo/sendMessage",
        "method": "POST",
        "jsonParameters": true,
        "options": {
          "timeout": 60000
        },
        "bodyParametersJson": "{\n  \"chat_id\": \"987654321\",\n  \"text\": \"={{$node[\\\"Compile Digest (sort & format)\\\"].json.markdown}}\",\n  \"parse_mode\": \"Markdown\"\n}"
      },
      "name": "Send Digest - Telegram",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        4200,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// WhatsApp integration note (Twilio) - for production replace with actual Twilio HTTP Request node and credentials\nreturn [{ json: {\n  note: \"To send the digest via WhatsApp use Twilio's API. Example: POST to https://api.twilio.com/2010-04-01/Accounts/{AccountSid}/Messages.json with From=whatsapp:{TWILIO_WHATSAPP_FROM}, To=whatsapp:{DESTINATION}, Body and optional MediaUrl. Use Basic Auth (Account SID / Auth Token).\",\n  example: {\n    method: \"POST\",\n    url: \"https://api.twilio.com/2010-04-01/Accounts/[TWILIO_ACCOUNT_SID]/Messages.json\",\n    body: {\n      From: \"whatsapp:[TWILIO_WHATSAPP_FROM]\",\n      To: \"whatsapp:[DESTINATION_NUMBER]\",\n      Body: \"Top AI stories: ...\",\n      MediaUrl: \"[image_url_optional]\"\n    }\n  }\n}}];"
      },
      "name": "WhatsApp Integration Note (Twilio) - Info",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        4200,
        410
      ]
    },
    {
      "parameters": {},
      "name": "NoOp - End",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        4500,
        300
      ]
    }
  ],
  "connections": {
    "Schedule Trigger (daily @ 06:00 UTC)": {
      "main": [
        [
          { "node": "RSS - TechCrunch AI", "type": "main", "index": 0 },
          { "node": "RSS - VentureBeat AI", "type": "main", "index": 0 },
          { "node": "RSS - arXiv cs.AI", "type": "main", "index": 0 },
          { "node": "RSS - AI Trends", "type": "main", "index": 0 },
          { "node": "RSS - Hacker News (tech signals)", "type": "main", "index": 0 },
          { "node": "Google News RSS (الذكاء الاصطناعي)", "type": "main", "index": 0 },
          { "node": "Twitter - Keyword Monitor (optional)", "type": "main", "index": 0 }
        ]
      ]
    },
    "RSS - TechCrunch AI": {
      "main": [
        [
          { "node": "Merge RSS outputs", "type": "main", "index": 0 }
        ]
      ]
    },
    "RSS - VentureBeat AI": {
      "main": [
        [
          { "node": "Merge RSS outputs", "type": "main", "index": 0 }
        ]
      ]
    },
    "RSS - arXiv cs.AI": {
      "main": [
        [
          { "node": "Merge RSS outputs", "type": "main", "index": 0 }
        ]
      ]
    },
    "RSS - AI Trends": {
      "main": [
        [
          { "node": "Merge RSS outputs", "type": "main", "index": 0 }
        ]
      ]
    },
    "RSS - Hacker News (tech signals)": {
      "main": [
        [
          { "node": "Merge RSS outputs", "type": "main", "index": 0 }
        ]
      ]
    },
    "Google News RSS (الذكاء الاصطناعي)": {
      "main": [
        [
          { "node": "Merge RSS outputs", "type": "main", "index": 0 }
        ]
      ]
    },
    "Twitter - Keyword Monitor (optional)": {
      "main": [
        [
          { "node": "Merge RSS outputs", "type": "main", "index": 0 }
        ]
      ]
    },
    "Merge RSS outputs": {
      "main": [
        [
          { "node": "Deduplicate (by URL) & Normalize", "type": "main", "index": 0 }
        ]
      ]
    },
    "Deduplicate (by URL) & Normalize": {
      "main": [
        [
          { "node": "HTTP Request - Fetch Article HTML", "type": "main", "index": 0 }
        ]
      ]
    },
    "HTTP Request - Fetch Article HTML": {
      "main": [
        [
          { "node": "HTML Extract - main content & og:image", "type": "main", "index": 0 }
        ]
      ]
    },
    "HTML Extract - main content & og:image": {
      "main": [
        [
          { "node": "Filter Short Articles (>150 words)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Filter Short Articles (>150 words)": {
      "main": [
        [
          { "node": "Ollama - Summarize & Classify", "type": "main", "index": 0 }
        ]
      ]
    },
    "Ollama - Summarize & Classify": {
      "main": [
        [
          { "node": "Parse Ollama Response", "type": "main", "index": 0 }
        ]
      ]
    },
    "Parse Ollama Response": {
      "main": [
        [
          { "node": "Normalize Ollama Output", "type": "main", "index": 0 }
        ]
      ]
    },
    "Normalize Ollama Output": {
      "main": [
        [
          { "node": "Aggregate Enriched Articles", "type": "main", "index": 0 }
        ]
      ]
    },
    "Aggregate Enriched Articles": {
      "main": [
        [
          { "node": "Compile Digest (sort & format)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Compile Digest (sort & format)": {
      "main": [
        [
          { "node": "Send Digest - Telegram", "type": "main", "index": 0 },
          { "node": "WhatsApp Integration Note (Twilio) - Info", "type": "main", "index": 0 }
        ]
      ]
    },
    "Send Digest - Telegram": {
      "main": [
        [
          { "node": "NoOp - End", "type": "main", "index": 0 }
        ]
      ]
    },
    "WhatsApp Integration Note (Twilio) - Info": {
      "main": [
        [
          { "node": "NoOp - End", "type": "main", "index": 0 }
        ]
      ]
    }
  },
  "active": false,
  "settings": {}
}
