{
  "name": "Daily AI News Digest - Arabic AI Priority (Ollama) - Production Template",
  "nodes": [
    {
      "parameters": {
        "cronExpression": "0 6 * * *",
        "timeZone": "UTC"
      },
      "name": "Schedule Trigger (daily @ 06:00 UTC)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        250,
        250
      ]
    },
    {
      "parameters": {
        "url": "https://techcrunch.com/tag/ai/feed/",
        "limit": 20
      },
      "name": "RSS - TechCrunch AI",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        600,
        60
      ]
    },
    {
      "parameters": {
        "url": "https://venturebeat.com/category/ai/feed/",
        "limit": 20
      },
      "name": "RSS - VentureBeat AI",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        600,
        140
      ]
    },
    {
      "parameters": {
        "url": "http://export.arxiv.org/rss/cs.AI",
        "limit": 20
      },
      "name": "RSS - arXiv cs.AI",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        600,
        220
      ]
    },
    {
      "parameters": {
        "url": "https://aitrends.com/feed/",
        "limit": 20
      },
      "name": "RSS - AI Trends",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        600,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://news.ycombinator.com/rss",
        "limit": 20
      },
      "name": "RSS - Hacker News (tech signals)",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        600,
        380
      ]
    },
    {
      "parameters": {
        "url": "https://news.google.com/rss/search?q=الذكاء+الاصطناعي&hl=ar&gl=AE&ceid=AE:ar",
        "limit": 30
      },
      "name": "Google News RSS (الذكاء الاصطناعي)",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        600,
        460
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "headerAuth": [
          {
            "name": "Authorization",
            "value": "Bearer [TWITTER_BEARER_TOKEN]"
          }
        ],
        "url": "https://api.twitter.com/2/tweets/search/recent?query=الذكاء_الاصطناعي OR \"الذكاء الاصطناعي\" lang:ar -is:retweet",
        "options": {},
        "responseFormat": "json"
      },
      "name": "Twitter - Keyword Monitor (optional)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        600,
        540
      ]
    },
    {
      "parameters": {
        "mode": "append",
        "appendKey": "rssItems",
        "values": {
          "string": []
        }
      },
      "name": "Set - normalize feed item structure",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Merge items from RSS and other sources into normalized array\nconst output = [];\nfor (const it of items) {\n  const j = it.json;\n  if (Array.isArray(j)) {\n    j.forEach(x => output.push(x));\n  } else {\n    output.push(j);\n  }\n}\nreturn output.map(i => ({ json: i }));"
      },
      "name": "Merge RSS outputs",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1200,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Deduplicate by URL (link) and normalize keys\nconst seen = new Set();\nconst out = [];\nfor (const it of items) {\n  const j = it.json;\n  const url = (j.link || j.url || j.id || '').toString();\n  if (!url) continue;\n  const normalized = url.split('?')[0];\n  if (seen.has(normalized)) continue;\n  seen.add(normalized);\n  out.push({ json: {\n    title: j.title || j.headline || j.name || '',\n    link: url,\n    pubDate: j.pubDate || j.published || null,\n    summary: j.contentSnippet || j.description || '',\n    source: j.source || j.feedTitle || '',\n    raw: j\n  }});\n}\nreturn out;"
      },
      "name": "Deduplicate (by URL)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1500,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{$json[\"link\"]}}",
        "responseFormat": "string",
        "options": {
          "followRedirect": true,
          "timeout": 60
        }
      },
      "name": "HTTP Request - Fetch Article HTML",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1800,
        240
      ]
    },
    {
      "parameters": {
        "html": "={{$node[\"HTTP Request - Fetch Article HTML\"].binary ? '' : $node[\"HTTP Request - Fetch Article HTML\"].json}}",
        "properties": [
          {
            "key": "mainContent",
            "attribute": "",
            "selector": "article, main, [role='main'], .article-body, .post-content, .entry-content",
            "type": "single"
          },
          {
            "key": "ogImage",
            "attribute": "content",
            "selector": "meta[property='og:image'], meta[name='og:image']",
            "type": "single"
          },
          {
            "key": "titleFromMeta",
            "attribute": "content",
            "selector": "meta[property='og:title'], meta[name='og:title'], title",
            "type": "single"
          }
        ]
      },
      "name": "HTML Extract - main content & og:image",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        2100,
        240
      ]
    },
    {
      "parameters": {
        "functionCode": "// Use the extracted content; fallback to snippet; compute word count and filter short articles\nconst html = $node['HTML Extract - main content & og:image'].json.mainContent || $json.summary || '';\nconst text = (html + '').replace(/<[^>]+>/g, ' ').replace(/\\s+/g,' ').trim();\nconst wordCount = text ? text.split(' ').length : 0;\nif (wordCount < 200) {\n  // drop short articles\n  return [];\n}\nreturn [{ json: {\n  title: $node['HTML Extract - main content & og:image'].json.titleFromMeta || $json.title,\n  link: $json.link,\n  pubDate: $json.pubDate,\n  source: $json.source,\n  content_text: text,\n  ogImage: $node['HTML Extract - main content & og:image'].json.ogImage || null\n}}];"
      },
      "name": "Filter Short Articles (>200 words)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2400,
        240
      ]
    },
    {
      "parameters": {
        "url": "http://localhost:11434/api/generate",
        "method": "POST",
        "jsonParameters": true,
        "options": {
          "timeout": 120
        },
        "bodyParametersJson": "={\n  \"model\": \"[YOUR_OLLAMA_MODEL_NAME]\",\n  \"prompt\": `You are an expert assistant. Input article URL: {{$json.link}}\\nArticle text:\\n{{$json.content_text}}\\n\\nProduce a clean JSON object exactly with these keys: english_summary, arabic_summary, relevance_score_arabic_ai, keywords, category.\\n- english_summary: professional 3-4 sentence summary in English.\\n- arabic_summary: professional 3-4 sentence summary in Arabic (Modern Standard Arabic).\\n- relevance_score_arabic_ai: integer 1-10 (10=direct Arabic AI breakthrough).\\n- keywords: array of up to 6 keywords in Arabic/English.\\n- category: one of ['LLM Development','AI Application','AI Research','Market News','Arabic AI Breakthrough'].\\nReturn only the JSON object (no explanation).`,\n  \"max_tokens\": 800\n}"
      },
      "name": "Ollama - Summarize & Classify (HTTP Request)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2700,
        240
      ]
    },
    {
      "parameters": {
        "functionCode": "// Parse Ollama response and attach to item\nlet parsed = {};\nconst resp = $node['Ollama - Summarize & Classify (HTTP Request)'].json;\ntry {\n  if (typeof resp === 'string') {\n    parsed = JSON.parse(resp);\n  } else if (resp && typeof resp === 'object') {\n    // Ollama may return an object with a 'text' or 'result'\n    if (resp.text) parsed = JSON.parse(resp.text);\n    else if (resp.result) parsed = typeof resp.result === 'string' ? JSON.parse(resp.result) : resp.result;\n    else parsed = resp;\n  }\n} catch (e) {\n  parsed = {\n    english_summary: '',\n    arabic_summary: '',\n    relevance_score_arabic_ai: 1,\n    keywords: [],\n    category: 'Market News'\n  };\n}\nreturn [{ json: Object.assign({}, $json, { ollama: parsed }) }];"
      },
      "name": "Parse Ollama Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3000,
        240
      ]
    },
    {
      "parameters": {
        "functionCode": "// Normalize Ollama Output\nconst o = $json;\nconst relRaw = (o.ollama && (o.ollama.relevance_score_arabic_ai || o.ollama.relevance_score)) || 1;\nconst rel = parseInt(relRaw, 10) || 1;\nreturn [{ json: Object.assign({}, o, {\n  relevance: rel,\n  keywords: (o.ollama && o.ollama.keywords) || [],\n  category: (o.ollama && o.ollama.category) || 'Market News',\n  english_summary: (o.ollama && o.ollama.english_summary) || '',\n  arabic_summary: (o.ollama && o.ollama.arabic_summary) || '',\n  image: o.ogImage || null\n}) }];"
      },
      "name": "Normalize Ollama Output",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3300,
        240
      ]
    },
    {
      "parameters": {
        "functionCode": "// Aggregate enriched articles into one array\nconst arr = items.map(i => i.json);\nreturn [{ json: { articles: arr } }];"
      },
      "name": "Aggregate Enriched Articles",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3600,
        240
      ]
    },
    {
      "parameters": {
        "functionCode": "// Sort by relevance descending and build master JSON + Markdown digest\nconst data = $json.articles || [];\ndata.sort((a, b) => (b.relevance || 0) - (a.relevance || 0));\nconst master = { generated_at: new Date().toISOString(), count: data.length, articles: data };\nlet md = `# Daily AI News Digest (Arabic AI priority)\\nGenerated: ${master.generated_at}\\nTotal items: ${master.count}\\n\\n`;\nfor (const a of data) {\n  md += `---\\n\\n### ${a.title}\\n`;\n  if (a.image) md += `![](${a.image})\\n\\n`;\n  md += `**Source:** ${a.source || ''}  \\n`;\n  md += `**Published:** ${a.pubDate || ''}  \\n`;\n  md += `**Relevance (Arabic AI):** ${a.relevance} / 10  \\n`;\n  md += `**Keywords:** ${(a.keywords || []).join(', ')}  \\n\\n`;\n  md += `${a.arabic_summary || ''}  \\n\\n`;\n  md += `[Read more](${a.link})\\n\\n`;\n}\nreturn [{ json: { master, markdown: md } }];"
      },
      "name": "Compile Digest (sort & format)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3900,
        240
      ]
    },
    {
      "parameters": {
        "url": "https://api.telegram.org/bot[YOUR_TELEGRAM_BOT_TOKEN]/sendMessage",
        "method": "POST",
        "jsonParameters": true,
        "options": {
          "timeout": 60
        },
        "bodyParametersJson": "{\n  \"chat_id\": \"[YOUR_TELEGRAM_CHAT_ID]\",\n  \"text\": \"{{ $json.markdown }}\",\n  \"parse_mode\": \"Markdown\",\n  \"disable_web_page_preview\": false\n}"
      },
      "name": "Send Digest - Telegram (sendMessage)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        4200,
        120
      ]
    },
    {
      "parameters": {
        "url": "[YOUR_WEBSITE_API_ENDPOINT]",
        "method": "POST",
        "jsonParameters": true,
        "options": {
          "timeout": 60
        },
        "bodyParametersJson": "={{ JSON.stringify($json.master) }}"
      },
      "name": "Send Digest - Website API (POST JSON)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        4200,
        360
      ]
    },
    {
      "parameters": {
        "functionCode": "// WhatsApp integration note (Twilio) - for production replace with actual Twilio HTTP Request node and credentials\nreturn [{ json: {\n  note: \"To send the digest via WhatsApp use Twilio's API. Example: POST to https://api.twilio.com/2010-04-01/Accounts/{AccountSid}/Messages.json with From=whatsapp:{TWILIO_WHATSAPP_FROM}, To=whatsapp:{DESTINATION}, Body and optional MediaUrl. Use Basic Auth (Account SID / Auth Token).\",\n  example: {\n    method: \"POST\",\n    url: \"https://api.twilio.com/2010-04-01/Accounts/[TWILIO_ACCOUNT_SID]/Messages.json\",\n    body: {\n      From: \"whatsapp:[TWILIO_WHATSAPP_FROM]\",\n      To: \"whatsapp:[DESTINATION_NUMBER]\",\n      Body: \"Top AI stories: ...\",\n      MediaUrl: \"[image_url_optional]\"\n    }\n  }\n}}];"
      },
      "name": "WhatsApp Integration Note (Twilio) - Info",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        4200,
        600
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "options": {}
      },
      "name": "NoOp - End",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        4500,
        300
      ]
    }
  ],
  "connections": {
    "Schedule Trigger (daily @ 06:00 UTC)": {
      "main": [
        [
          {
            "node": "RSS - TechCrunch AI",
            "type": "main",
            "index": 0
          },
          {
            "node": "RSS - VentureBeat AI",
            "type": "main",
            "index": 0
          },
          {
            "node": "RSS - arXiv cs.AI",
            "type": "main",
            "index": 0
          },
          {
            "node": "RSS - AI Trends",
            "type": "main",
            "index": 0
          },
          {
            "node": "RSS - Hacker News (tech signals)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Google News RSS (الذكاء الاصطناعي)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Twitter - Keyword Monitor (optional)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS - TechCrunch AI": {
      "main": [
        [
          {
            "node": "Merge RSS outputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS - VentureBeat AI": {
      "main": [
        [
          {
            "node": "Merge RSS outputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS - arXiv cs.AI": {
      "main": [
        [
          {
            "node": "Merge RSS outputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS - AI Trends": {
      "main": [
        [
          {
            "node": "Merge RSS outputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS - Hacker News (tech signals)": {
      "main": [
        [
          {
            "node": "Merge RSS outputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google News RSS (الذكاء الاصطناعي)": {
      "main": [
        [
          {
            "node": "Merge RSS outputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twitter - Keyword Monitor (optional)": {
      "main": [
        [
          {
            "node": "Merge RSS outputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge RSS outputs": {
      "main": [
        [
          {
            "node": "Set - normalize feed item structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set - normalize feed item structure": {
      "main": [
        [
          {
            "node": "Merge RSS outputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge RSS outputs": {
      "main": [
        [
          {
            "node": "Deduplicate (by URL)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deduplicate (by URL)": {
      "main": [
        [
          {
            "node": "HTTP Request - Fetch Article HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Fetch Article HTML": {
      "main": [
        [
          {
            "node": "HTML Extract - main content & og:image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML Extract - main content & og:image": {
      "main": [
        [
          {
            "node": "Filter Short Articles (>200 words)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Short Articles (>200 words)": {
      "main": [
        [
          {
            "node": "Ollama - Summarize & Classify (HTTP Request)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama - Summarize & Classify (HTTP Request)": {
      "main": [
        [
          {
            "node": "Parse Ollama Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Ollama Response": {
      "main": [
        [
          {
            "node": "Normalize Ollama Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Ollama Output": {
      "main": [
        [
          {
            "node": "Aggregate Enriched Articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Enriched Articles": {
      "main": [
        [
          {
            "node": "Compile Digest (sort & format)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compile Digest (sort & format)": {
      "main": [
        [
          {
            "node": "Send Digest - Telegram (sendMessage)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Digest - Website API (POST JSON)",
            "type": "main",
            "index": 0
          },
          {
            "node": "WhatsApp Integration Note (Twilio) - Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Digest - Telegram (sendMessage)": {
      "main": [
        [
          {
            "node": "NoOp - End",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Digest - Website API (POST JSON)": {
      "main": [
        [
          {
            "node": "NoOp - End",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Integration Note (Twilio) - Info": {
      "main": [
        [
          {
            "node": "NoOp - End",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {}
    }
